/* Imports */
#include "./utils/Address.huff"
#include "./utils/HashMap.huff"

/* Interface */
#define function dpds(uint256) view returns(bytes32)
#define function updaters(uint256) view returns(address)
#define function versions(uint256) view returns(uint256)

#define function addDpd(bytes,address,address) nonpayable returns(uint256)
#define function updateDpd(uint256,bytes) nonpayable returns(uint256)

#define function setDpdOwner(uint256,address) nonpayable returns()
#define function setDpdUpdater(uint256,address) nonpayable returns()

#define event DPDAdded(uint256, address, address,bytes)
#define event DPDUpdated(uint256,uint256,bytes)
#define event DPDOwnerChanged(uint256,address)
#define event DPDUpdaterChanged(uint256,address)

/* Event Signatures */

// event DPDAdded(uint256, address, address,bytes)
#define constant DPD_ADDED_EVENT_SIGNATURE = 0x95fe7b77092b58e9c8b9ae5ef3d58bbc59c44859c4afa4dad29538874dab4b46

// event DPDUpdated(uint256,uint256,bytes)
#define constant DPD_UPDATED_EVENT_SIGNATURE = 0x506c0ddb12120d4fe8bb92afc7c2d8401d27d4f1f32ed265952c6f5888cb1269

// event DPDOwnerChanged(uint256,address)
#define constant DPD_OWNER_CHANGED_EVENT_SIGNATURE = 0xaccf2a113cd975e46358a972cc76275e3d1f21b97ca3f668c911f91b0e9bf14a

// event DPDUpdaterChanged(uint256,address)
#define constant DPD_UPDATER_CHANGED_EVENT_SIGNATURE = 0x79e446654be92d32ba07e4935511105931d7b6dfbe59a0eb00e2ee27f6b5bf8e

/* Storage Slots */
#define constant DPD_ARRAY_SLOT = FREE_STORAGE_POINTER() // mapping(uint256 => bytes)
#define constant DPD_ARRAY_LENGTH_SLOT = FREE_STORAGE_POINTER()

#define constant VERSION_MAP_SLOT = FREE_STORAGE_POINTER()
#define constant DPD_OWNER_MAP_SLOT = FREE_STORAGE_POINTER()
#define constant DPD_UPDATER_MAP_SLOT = FREE_STORAGE_POINTER()


/* View Functions */
#define macro GET_DPD_DATA() = takes(0) returns (0) {
    // Retrieve the data from storage.
    0x04 calldataload               // [dpd_id]
    [DPD_ARRAY_SLOT]                // [slot, dpd_id]
    LOAD_ELEMENT_FROM_KEYS(0x00)    // [data]

    // Return the data
    0x00 mstore                     // []
    0x20 0x00 return                // []
}

#define macro GET_DPD_OWNER() = takes(0) returns (0) {
    0x04 calldataload                           // [dpd_id]
    [DPD_OWNER_MAP_SLOT]                        // [salt, dpd_id]
    LOAD_ELEMENT_FROM_KEYS(0x00)                // [owner]
    0x00 mstore                                 // [] 
    0x20 0x00                                   // [32, 0]
    return                                      // []
}

#define macro GET_DPD_UPDATER() = takes(0) returns (0) {
    0x04 calldataload                           // [dpd_id]
    [DPD_UPDATER_MAP_SLOT]                      // [salt, dpd_id]
    LOAD_ELEMENT_FROM_KEYS(0x00)                // [updater]
    0x00 mstore                                 // [] 
    0x20 0x00                                   // [32, 0]
    return                                      // []
}

#define macro GET_DPD_VERSION() = takes(0) returns (0) {
    0x04 calldataload                           // [dpd_id]
    [VERSION_MAP_SLOT]                          // [salt, dpd_id]
    LOAD_ELEMENT_FROM_KEYS(0x00)                // [owner]
    0x00 mstore                                 // [] 
    0x20 0x00                                   // [32, 0]
    return                                      // []
}

/* DPD Initialization */
#define macro ADD_DPD() = takes(0) returns (0) {
    // Get the DPD array length, which serves as the DPD ID.
    0x04 calldataload                           // [dpd_id]
    ID_CHECKS(error)                            // [dpd_id]

    // Store the DPD data.
    0x24 calldataload                           // [data, dpd_id]
    dup2                                        // [dpd_id, data, dpd_id]
    [DPD_ARRAY_SLOT]                            // [salt, dpd_id, data, dpd_id]
    STORE_ELEMENT_FROM_KEYS(0x00)               // [dpd_id]

    // Store the address of the owner.
    0x44 calldataload                           // [owner, dpd_id, length*32, length]
    dup2                                        // [dpd_id, owner, dpd_io, length*32, length]
    [DPD_OWNER_MAP_SLOT]                        // [salt, dpd_id, owner, dpd_io, length*32, length]
    STORE_ELEMENT_FROM_KEYS(0x00)               // [dpd_id, length*32, length]
    
    // Store the address of the updater.
    0x64 calldataload                           // [updater, dpd_id, length*32, length]
    dup2                                        // [dpd_id, updater, dpd_id, length*32, length]
    [DPD_UPDATER_MAP_SLOT]                      // [salt, dpd_id, updater, dpd_id, length*32, length]     
    STORE_ELEMENT_FROM_KEYS(0x00)               // [dpd_id, length*32, length]

    // Stop the program.
    stop

    // Revert if the checks are wrong.
    error:
        0x00 0x00 revert
}

// Ensure that a DPD ID has not been taken.
// Input Stack: [dpd_id]
// Output Stack: [dpd_id]
#define macro ID_CHECKS(error) = takes(1) returns (1) {
    // Retrieve the data from storage.
    // Revert if it is nonzero.
    dup1                            // [dpd_id, dpd_id]
    [DPD_ARRAY_SLOT]                // [slot, dpd_id, dpd_id]
    LOAD_ELEMENT_FROM_KEYS(0x00)    // [data, dpd_id]
    0x00 eq iszero                  // [data != 0, dpd_id]
    <error> jumpi                   // [dpd_id]

    // Retrieve the owner from storage.
    // Revert if the address is nonzero.
    dup1                            // [dpd_id, dpd_id]
    [DPD_OWNER_MAP_SLOT]            // [slot, dpd_id, dpd_id]
    LOAD_ELEMENT_FROM_KEYS(0x00)    // [data, dpd_id]
    0x00 eq iszero                  // [data != 0, dpd_id]
    <error> jumpi                     // [dpd_id]

    // Retrieve the updater from storage.
    // Revert if the address is nonzero.
    dup1                            // [dpd_id, dpd_id]
    [DPD_UPDATER_MAP_SLOT]            // [slot, dpd_id, dpd_id]
    LOAD_ELEMENT_FROM_KEYS(0x00)    // [data, dpd_id]
    0x00 eq iszero                  // [data != 0, dpd_id]
    <error> jumpi                     // [dpd_id]
}

/* Update Data Macros */
#define macro UPDATE_DPD_DATA() = takes(0) returns (0) {
    // Retrieve the DPD ID and data.
    0x24 calldataload                   // [data]
    0x04 calldataload                   // [dpd_id, data]

    // Ensure that the sender is the DPD updater or owner.
    dup1                                // [dpd_id, dpd_id, data]
    [DPD_UPDATER_MAP_SLOT]              // [salt, dpd_id, dpd_id, data]
    LOAD_ELEMENT_FROM_KEYS(0x00)        // [updater, dpd_id, data]
    caller                              // [msg.sender, updater, dpd_id, data]
    eq iszero                           // [msg.sender!=updater, dpd_id, data]
    dup2                                // [dpd_id, msg.sender!=updater, dpd_id, data]
    [DPD_OWNER_MAP_SLOT]                // [salt, dpd_id, msg.sender!=updater, dpd_id, data]
    LOAD_ELEMENT_FROM_KEYS(0x00)        // [owner, msg.sender!=updater, dpd_id, data]
    caller                              // [msg.sender, owner, msg.sender!=updater, dpd_id, data]
    eq iszero                           // [msg.sender!=owner, msg.sender!=updater, dpd_id, data]
    or                                  // [msg.sender!=owner || msg.sender!=updater, dpd_id, data]
    error jumpi                         // [dpd_id, data]

    // Store new data.
    [DPD_ARRAY_SLOT]                    // [salt, dpd_id, data]
    STORE_ELEMENT_FROM_KEYS(0x00)       // []

    // Stop the program.
    stop

    // Error label.
    error:
        0x00 0x00 revert
}
#define macro UPDATE_DPD_UPDATER() = takes(0) returns (0) {}
#define macro UPDATE_DPD_OWNER() = takes(0) returns (0) {}

/* Main Macro */
#define macro MAIN() = takes(0) returns (0) {
    0x00 calldataload 0xE0 shr // [sig]
    dup1 0x91256f59 eq new_dpd jumpi
    dup1 0x2acb38eb eq get_dpd_data jumpi
    dup1 0x025e7c27 eq get_dpd_owner jumpi
    dup1 0x82cb6229 eq get_dpd_updater jumpi
    dup1 0x87aee00e eq get_dpd_version jumpi
    dup1 0x7c6e99a4 eq update_dpd_data jumpi
    dup1 0xf9124637 eq update_dpd_owner jumpi
    dup1 0x9e82b5d6 eq update_dpd_updater jumpi

    0x00 0x00 revert

    new_dpd:
        ADD_DPD()
    get_dpd_data:
        GET_DPD_DATA()
    get_dpd_owner:
        GET_DPD_OWNER()
    get_dpd_updater:
        GET_DPD_UPDATER()
    get_dpd_version:
        GET_DPD_VERSION()
    update_dpd_data:
        UPDATE_DPD_DATA()
    update_dpd_owner:
        UPDATE_DPD_OWNER()
    update_dpd_updater:
        UPDATE_DPD_UPDATER()
}