/* 
    Macros that enable you to set an owner address, which you can use to gatekeep calls from regular users. 
*/

/* Storage */
#define constant OWNER_POINTER = FREE_STORAGE_POINTER()

/* CONSTRUCTOR */

/// @dev Sets the owner address to the caller (deployer in the case of a contract deployment).
/// This macro should be used in the contract constructor.
#define macro OWNABLE_CONSTRUCTOR() = takes (0) returns (0) {
    caller [OWNER_POINTER] sstore
}

/* Methods */

/// @dev Sets the owner to the given address.
/// Input Stack: [owner]
/// Output Stack: []
#define macro OWNABLE_SET_OWNER() = takes (1) returns (0) {
    [OWNER_POINTER] sstore
}

/// @dev Pushes the owner address to the stack.
/// Input Stack: []
/// Output Stack: [owner]
#define macro OWNABLE_GET_OWNER() = takes (0) returns (1) {
    [OWNER_POINTER] sload
}

/// @dev Pushes a boolean to the stack to indicate whether the caller is the owner.
/// Input Stack: []
/// Output Stack: [is_owner]
#define macro IS_OWNER() = takes(0) returns (1) {
    [OWNER_POINTER] sload caller eq is_owner jumpi
} 

/// @dev Checks if the caller is the owner, reverting if they are not.
/// Input Stack: []
/// Output Stack: []
#define macro ONLY_OWNER() = takes(0) returns(0) {
	IS_OWNER() jumpi
		0x00 0x00 revert
	is_owner:
}