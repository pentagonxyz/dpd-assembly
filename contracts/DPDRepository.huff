/* Imports */
#include "./contracts/utils/Address.huff"
#include "./contracts/utils/HashMap.huff"
#include "./contracts/utils/Bytes.huff"

/* Interface */
#define function dpds(uint256) view returns(bytes,address)
#define function updaters(uint256) view returns(address)
#define function versions(uint256) view returns(uint256)

#define function addDpd(bytes,address,address) nonpayable returns(uint256)
#define function updateDpd(uint256,bytes) nonpayable returns(uint256)

#define function setDpdOwner(uint256,address) nonpayable returns()
#define function setDpdUpdater(uint256,address) nonpayable returns()

#define event DPDAdded(uint256, address, address,bytes)
#define event DPDUpdated(uint256,uint256,bytes)
#define event DPDOwnerChanged(uint256,address)
#define event DPDUpdaterChanged(uint256,address)

/* Event Signatures */

// event DPDAdded(uint256, address, address,bytes)
#define constant DPD_ADDED_EVENT_SIGNATURE = 0x95fe7b77092b58e9c8b9ae5ef3d58bbc59c44859c4afa4dad29538874dab4b46

// event DPDUpdated(uint256,uint256,bytes)
#define constant DPD_UPDATED_EVENT_SIGNATURE = 0x506c0ddb12120d4fe8bb92afc7c2d8401d27d4f1f32ed265952c6f5888cb1269

// event DPDOwnerChanged(uint256,address)
#define constant DPD_OWNER_CHANGED_EVENT_SIGNATURE = 0xaccf2a113cd975e46358a972cc76275e3d1f21b97ca3f668c911f91b0e9bf14a

// event DPDUpdaterChanged(uint256,address)
#define constant DPD_UPDATER_CHANGED_EVENT_SIGNATURE = 0x79e446654be92d32ba07e4935511105931d7b6dfbe59a0eb00e2ee27f6b5bf8e

/* Storage Slots */
#define constant DPD_ARRAY_SLOT = FREE_STORAGE_POINTER() // mapping(uint256 => bytes)
#define constant DPD_ARRAY_LENGTH_SLOT = FREE_STORAGE_POINTER()

#define constant VERSION_MAP_SLOT = FREE_STORAGE_POINTER()
#define constant DPD_OWNER_MAP_SLOT = FREE_STORAGE_POINTER()
#define constant DPD_UPDATER_MAP_SLOT = FREE_STORAGE_POINTER()

/* View Functions */
#define macro GET_DPD_DATA() = takes(0) returns (0) {
    0x04 calldataload                           // [dpd_id]
    [DPD_ARRAY_SLOT]                            // [salt, dpd_id]
    LOAD_BYTES_ELEMENT_FROM_KEYS(0x00, 0x40)    // []
    0x40 mload 0x20 mul                         // [bytes_length]
    0x40                                        // [offset, bytes_length]
    return                                      // []
}

#define macro GET_DPD_OWNER() = takes(0) returns (0) {
    0x04 calldataload                           // [dpd_id]
    [DPD_OWNER_MAP_SLOT]                        // [salt, dpd_id]
    LOAD_ELEMENT_FROM_KEYS(0x00)                // [owner]
    0x00 mstore                                 // [] 
    0x20 0x00                                   // [32, 0]
    return                                      // []
}

#define macro GET_DPD_UPDATER() = takes(0) returns (0) {
    0x04 calldataload                           // [dpd_id]
    [DPD_UPDATER_MAP_SLOT]                      // [salt, dpd_id]
    LOAD_ELEMENT_FROM_KEYS(0x00)                // [owner]
    0x00 mstore                                 // [] 
    0x20 0x00                                   // [32, 0]
    return                                      // []
}

#define macro GET_DPD_VERSION() = takes(0) returns (0) {
    0x04 calldataload                           // [dpd_id]
    [VERSION_MAP_SLOT]                          // [salt, dpd_id]
    LOAD_ELEMENT_FROM_KEYS(0x00)                // [owner]
    0x00 mstore                                 // [] 
    0x20 0x00                                   // [32, 0]
    return                                      // []
}

/* DPD Initialization */
#define macro ADD_DPD() = takes(0) returns (0) {
    // Note that the length is updated after the DPD is added.
    // The DPD_ARRAY is essentially a map that uses the current length as the key.
    // We store the CID at 0x40 to make room for data to be stored before hashing.
    READ_BYTES_FROM_CALLDATA(0x04, 0x40)        // [length*32, length]
    [DPD_ARRAY_LENGTH_SLOT] sload               // [dpd_id, length*32, length]
    dup1                                        // [dpd_id, dpd_id, length*32, length]
    [DPD_ARRAY_SLOT]                            // [salt, dpd_id, dpd_id, length*32, length]  
    STORE_BYTES_ELEMENTS_FROM_KEYS(0x00, 0x40)  // [dpd_id, length*32, length]

    // Store the address of the owner.
    0x24 calldataload                           // [owner, dpd_id, length*32, length]
    dup2                                        // [dpd_id, owner, dpd_io, length*32, length]
    [DPD_OWNER_MAP_SLOT]                        // [salt, dpd_id, owner, dpd_io, length*32, length]
    STORE_ELEMENT_FROM_KEYS(0x00)               // [dpd_id, length*32, length]
    
    // Store the address of the updater.
    0x44 calldataload                           // [updater, dpd_id, length*32, length]
    dup2                                        // [dpd_id, updater, dpd_id, length*32, length]
    [DPD_UPDATER_MAP_SLOT]                      // [salt, dpd_id, updater, dpd_id, length*32, length]     
    STORE_ELEMENT_FROM_KEYS(0x00)               // [dpd_id, length*32, length]

    // Incremement the DPD array length.
    // Input Stack: [dpd_id]
    0x01 add                // [dpd_id+1]
    [DPD_ARRAY_LENGTH_SLOT] // [dpd_array_length, dpd_id+1]
    sstore                  // []
}

/* Main Macro */
#define macro MAIN() = takes(0) returns (0) {
    0x00 calldataload 0xE0 shr // [sig]
    dup1 0xbb030beb eq add_dpd jumpi

    add_dpd:
        ADD_DPD()
}
